repeat task.wait() until game:IsLoaded()

getgenv().SendWebhook = true;
local WebhookURL = "https://discord.com/api/webhooks/1079401469607952385/Lgyvlf_gn0REAf8fwrZws-52xSLGKANoeI9Im6s1Yp7rfRrPODlEHBh2wuDB6ZaEQA-T";
local DiscordUserId = "691992081048010813";
local BankOwnerUserId = "4365603157";


local Library1 = require(game:GetService("ReplicatedStorage").Library)
local Audio = require(game:GetService("ReplicatedStorage").Library.Audio)
local TeleportMod = getsenv(game:GetService("Players").LocalPlayer.PlayerScripts.Scripts.GUIs.Teleport)
local Save = Library1.Save
local RS = game:GetService("RunService");
local Library = require(game:GetService("ReplicatedStorage").Library.Client.Network)
local InvokeHook = hookfunction(debug.getupvalue(Library.Invoke, 1), function(...) return true end)
local TeleportService = game:GetService("TeleportService")
local HttpService = game:GetService("HttpService")
local Audio = require(game:GetService("ReplicatedStorage").Library.Audio)
local FakeAudio = Instance.new("Sound", Workspace)
FakeAudio.Name = "Fake"
hookfunction(Audio.Play, function()
    return FakeAudio
end)

for _,v in next, Library.Invoke("Get My Banks") do 
    if v.Owner == tonumber(BankOwnerUserId) then 
        UserBank = v.BUID
    end 
end 

    

while task.wait() do 
    if not isfile("InProgress.txt") then writefile("InProgress.txt", "false") end
    if not isfile("WD.txt") then writefile("WD.txt", "false") end 
    if not isfile("DP.txt") then writefile("DP.txt", "false") end 

    if Save.Get().World ~= "Spawn" then TeleportMod.Teleport("Shop") end 
    repeat task.wait() until Library1.WorldCmds.HasLoaded() == true 



    local InProgress = readfile("InProgress.txt")
    local PetsTable = {}

    -- table.foreach(Library.Invoke("Get Bank", Library.Invoke("Get My Banks")[1].BUID)["Storage"]["Pets"][1], print)

    if InProgress == "false" then
        for _,v in next, Library.Invoke("Get Bank", UserBank)["Storage"]["Pets"] do
            table.insert(PetsTable, v.uid)
        end 

        writefile("Pets.txt", HttpService:JSONEncode(PetsTable))
        writefile("InProgress.txt", "true")
    end

    if readfile("WD.txt") == "false" then
        local Pets = HttpService:JSONDecode(readfile("Pets.txt"))
        local Withdraw = {}
        local OldPets = {}
        for i,v in next, Pets do
            if i <= 50 then 
                table.insert(Withdraw, v)
                table.insert(OldPets, v)
                
            end
        end 

        for _,v in next, Withdraw do 
            if table.find(Pets, v) then 
                table.remove(Pets, table.find(Pets, v))
            end 
        end 
        print(#Pets)

        writefile("OldPets.txt", HttpService:JSONEncode(OldPets))
        writefile("Pets.txt", HttpService:JSONEncode(Pets)) 
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(245.678864, 98.0348587, 354.59726, -0.999457598, 2.05632418e-08, -0.032932613, 1.7058122e-08, 1, 1.06714019e-07, 0.032932613, 1.06094369e-07, -0.999457598)
        task.wait(.5)
        Library.Invoke("Bank Withdraw", UserBank, Withdraw, 0)
        writefile("WD.txt", "true")
            

        local PetsWDCheck = {}
        repeat 
            table.clear(PetsWDCheck)

            for _,v in next, Save.Get().Pets do 
                if table.find(Withdraw, v.uid) ~= nil then
                    table.insert(PetsWDCheck, v.uid)
                end 
            end 

            print(#PetsWDCheck, #Withdraw)
            task.wait(2.5)
        
        until #PetsWDCheck == #Withdraw
        
    end  

    --delfile("Pets.txt") delfile("InProgress.txt") delfile("WD.txt") 

    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(294.178925, 103.154984, 166.689896, 0.260947227, 1.79803017e-09, -0.965353072, -5.13419751e-10, 1, 1.72377834e-09, 0.965353072, 4.58161772e-11, 0.260947227)
    task.wait(.25)
    Library.Invoke("Buy Egg", "Cracked Egg")
    --delfile("OldPets.txt") delfile("InProgress.txt") delfile("WD.txt") delfile("DP.txt") delfile("Pets.txt")
    writefile("DP.txt", "false")
    task.wait(7)

    if readfile("DP.txt") == "false" then
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(245.678864, 98.0348587, 354.59726, -0.999457598, 2.05632418e-08, -0.032932613, 1.7058122e-08, 1, 1.06714019e-07, 0.032932613, 1.06094369e-07, -0.999457598)
        task.wait(.5)
        OldPets = HttpService:JSONDecode(readfile("OldPets.txt"))
        
        Library.Invoke("Bank Deposit", UserBank, OldPets, 0)

        repeat
            local StillHavePets = false
            for _,v in next, Save.Get().Pets do
                if table.find(OldPets, v.uid) ~= nil then
                    StillHavePets = true
                end 
            end 
            task.wait(.5)
        until StillHavePets == false

        writefile("WD.txt", "false")
        writefile("DP.txt", "true")

        if #HttpService:JSONDecode(readfile("Pets.txt")) == 0 then
            writefile("InProgress.txt", "false")
            
            local function DateTime()
                local OSTime = os.time()
                local Time = os.date('!*t', OSTime)
                return string.format('%d-%d-%dT%02d:%02d:%02dZ', Time.year, Time.month, Time.day, Time.hour, Time.min, Time.sec)
            end

            if SendWebhook then 
                local Data = {
                    ["content"] = ("<@"..DiscordUserId..">"),
                    ["username"] = "Hamter",
                    ["avatar_url"] = "https://media.discordapp.net/attachments/1087412218032836719/1090789702887538818/hamster.png",
                    ["embeds"] = {
                        {
                            ["title"] = "Hamter's Index Completer Script",
                            ["description"] = ("**Indexing Completed.**"),
                            ["type"] = "rich",
                            ["color"] = tonumber(0x7269da),
                            ["timestamp"] = DateTime(),
                            ["footer"] = {
                                ["text"] = "",
                                ["icon_url"] = ""
                            },
                        }
                    }
                }
                local HeadersVar = {
                    ["content-type"] = "application/json"
                }
                local NewData = HttpService:JSONEncode(Data)
                local CombinedReq = {Url = WebhookURL, Body = NewData, Method = "POST", Headers = HeadersVar}
                
                syn.request(CombinedReq)
            end

            break
        end 
        

    end 
    task.wait(.5)
end
